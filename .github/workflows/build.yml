name: Build and Release

on:
  push:
    branches:
      - main
      - canary
      - dev
    paths-ignore:
      - "**.md"
      - ".github/**"
      - "metadata/**"
      - "!.github/workflows/build.yml"
  workflow_dispatch:
    inputs:
      message:
        description: "Custom message for the release"
        required: false
        default: "Manual release build"
      skip_upload:
        description: "Skip upload to Telegram (yes/no)"
        required: false
        default: "no"

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    env:
      NATIVE_TARGET: "arm64-v8a"
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_HARDLINK: "true"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "10G"
    steps:
      - name: Check Required Secrets
        id: check-secrets
        run: |
          # Base required secrets
          required_secrets=("HELPER_BOT_TOKEN" "LOCAL_PROPERTIES" "CHANNEL_MAIN")
          missing_secrets=()

          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              missing_secrets+=("$secret")
            fi
          done

          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "‚ùå Missing required secrets: ${missing_secrets[*]}"
            echo ""
            echo "Please configure these secrets in your repository settings:"
            echo "  Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
            echo ""
            echo "Required secrets:"
            echo "  - HELPER_BOT_TOKEN: Your Telegram bot token"
            echo "  - LOCAL_PROPERTIES: Build properties configuration"
            echo "  - CHANNEL_MAIN: Telegram channel ID for main branch (mandatory)"
            echo ""
            echo "Optional secrets for other branches:"
            echo "  - CHANNEL_CANARY: Telegram channel ID for canary branch"
            echo "  - CHANNEL_DEV: Telegram channel ID for dev branch"
            exit 1
          fi

          # Check if current branch has a configured channel
          BRANCH_NAME="${{ github.ref_name }}"
          SKIP_BUILD="false"

          case "$BRANCH_NAME" in
            "main")
              if [ -z "$CHANNEL_MAIN" ]; then
                SKIP_BUILD="true"
              fi
              ;;
            "canary")
              if [ -z "$CHANNEL_CANARY" ]; then
                echo "‚ö†Ô∏è No CHANNEL_CANARY configured, skipping build for canary branch"
                SKIP_BUILD="true"
              fi
              ;;
            "dev")
              if [ -z "$CHANNEL_DEV" ]; then
                echo "‚ö†Ô∏è No CHANNEL_DEV configured, skipping build for dev branch"
                SKIP_BUILD="true"
              fi
              ;;
          esac

          echo "SKIP_BUILD=$SKIP_BUILD" >> $GITHUB_ENV

          if [ "$SKIP_BUILD" = "true" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ All required secrets are configured for $BRANCH_NAME branch"
        env:
          HELPER_BOT_TOKEN: ${{ secrets.HELPER_BOT_TOKEN }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
          CHANNEL_MAIN: ${{ secrets.CHANNEL_MAIN }}
          CHANNEL_CANARY: ${{ secrets.CHANNEL_CANARY }}
          CHANNEL_DEV: ${{ secrets.CHANNEL_DEV }}

      - name: Checkout
        if: steps.check-secrets.outputs.skip_build != 'true'
        uses: actions/checkout@v4
      - name: Set up JDK 21
        if: steps.check-secrets.outputs.skip_build != 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: 'gradle'
      - name: Set up Gradle
        if: steps.check-secrets.outputs.skip_build != 'true'
        uses: gradle/actions/setup-gradle@v4
      - name: Set up ccache
        if: steps.check-secrets.outputs.skip_build != 'true' && github.ref_name != 'main'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          append-timestamp: false
      - name: Setup Android SDK Tools
        if: steps.check-secrets.outputs.skip_build != 'true'
        uses: android-actions/setup-android@v3
        with:
          packages: "build-tools;36.0.0 ndk;27.2.12479018 platforms;android-36"

      - name: Configure Android SDK Path
        if: steps.check-secrets.outputs.skip_build != 'true'
        run: |
          echo "sdk.dir=${ANDROID_HOME}" >> local.properties

      - name: Modify Gradle JVM Args
        if: steps.check-secrets.outputs.skip_build != 'true'
        run: |
          MEMORY_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
          MEMORY_GB=$((MEMORY_KB / 1024 / 1024))
          echo "Detected memory size: ${MEMORY_GB}GB"
          if [ $MEMORY_GB -ge 12 ]; then
            sed -i '/^org\.gradle\.jvmargs=/d' gradle.properties
            echo "org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=2G -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> gradle.properties
          fi
          cat gradle.properties

      - name: Configure Build Type
        if: steps.check-secrets.outputs.skip_build != 'true'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"

          if [ "$BRANCH_NAME" = "main" ]; then
            # Production build - full optimization
            sed -i 's/^-dontoptimize$/#-dontoptimize/' TMessagesProj/proguard-rules.pro
            echo "BUILD_VARIANT=Release" >> $GITHUB_ENV
            echo "‚úÖ Configured for PRODUCTION build (optimized)"
          else
            # Staging/Canary/Dev builds - enable optimization but keep some debug info
            sed -i 's/^-dontoptimize$/#-dontoptimize/' TMessagesProj/proguard-rules.pro
            echo "BUILD_VARIANT=Staging" >> $GITHUB_ENV
            if [ "$BRANCH_NAME" = "canary" ]; then
              echo "üê§ Configured for CANARY build (staging)"
            else
              echo "üîß Configured for DEV build (staging)"
            fi
          fi

      - name: Build APK
        if: steps.check-secrets.outputs.skip_build != 'true'
        run: |
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          export BUILD_TIMESTAMP=$(date +%s)

          # Build based on variant
          if [ "${{ env.BUILD_VARIANT }}" = "Release" ]; then
            ./gradlew TMessagesProj:assembleRelease
          else
            ./gradlew TMessagesProj:assembleStaging
          fi

          # Find the APK
          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk' | head -1)

          echo "APK_PATH=$APK" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
          echo "Found APK: $APK"

      - name: Upload Build Artifact
        if: steps.check-secrets.outputs.skip_build != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-${{ github.sha }}-apk
          path: ${{ env.APK_PATH }}
          retention-days: 7

      - name: Upload to Telegram
        if: steps.check-secrets.outputs.skip_build != 'true' && github.event.inputs.skip_upload != 'yes' && !contains(github.event.head_commit.message, '[skip upload]')
        env:
          BOT_TOKEN: ${{ secrets.HELPER_BOT_TOKEN }}
        run: |
          # Determine channel based on branch
          BRANCH_NAME="${{ github.ref_name }}"
          case "$BRANCH_NAME" in
            "main")
              CHAT_ID="${{ secrets.CHANNEL_MAIN }}"
              BRANCH_EMOJI="üöÄ"
              ;;
            "canary")
              CHAT_ID="${{ secrets.CHANNEL_CANARY }}"
              BRANCH_EMOJI="üê§"
              ;;
            "dev")
              CHAT_ID="${{ secrets.CHANNEL_DEV }}"
              BRANCH_EMOJI="üîß"
              ;;
            *)
              echo "‚ùå Unknown branch: $BRANCH_NAME"
              exit 1
              ;;
          esac

          # Get version info
          VERSION_NAME=$(grep "APP_VERSION_NAME=" gradle.properties | cut -d'=' -f2)
          VERSION_CODE=$(grep "APP_VERSION_CODE=" gradle.properties | cut -d'=' -f2)

          # Get commit info
          COMMIT_ID="${{ github.sha }}"
          COMMIT_ID_SHORT="${COMMIT_ID:0:7}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT_ID}"

          # Get trigger type and message
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            TRIGGER_TYPE="Auto"
          else
            COMMIT_MESSAGE="${{ github.event.inputs.message }}"
            TRIGGER_TYPE="Manual"
          fi

          # Get build info
          BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M UTC')
          APK_FILE="${{ env.APK_PATH }}"
          APK_SIZE_MB=$(echo "scale=1; $(stat -c%s "$APK_FILE") / 1048576" | bc)

          # Get build type label
          case "${{ env.BUILD_VARIANT }}" in
            "Release")
              BUILD_TYPE="Production"
              ;;
            "Staging")
              BUILD_TYPE="Staging"
              ;;
          esac

          # Prepare compact caption with all necessary info
          CAPTION="${BRANCH_EMOJI} **NagramX ${VERSION_NAME}** (${VERSION_CODE})"$'\n'
          CAPTION+="üåø \`${BRANCH_NAME}\` ‚Ä¢ ${BUILD_TYPE} ‚Ä¢ ${TRIGGER_TYPE}"$'\n'
          CAPTION+="üîó [\`${COMMIT_ID_SHORT}\`](${COMMIT_URL})"$'\n'
          CAPTION+="üí¨ ${COMMIT_MESSAGE}"$'\n'
          CAPTION+="üì¶ ${APK_SIZE_MB} MB ‚Ä¢ ${BUILD_DATE}"

          # Get thumbnail
          THUMB_PATH="TMessagesProj/src/main/ic_launcher_nagram_block_round-playstore.png"

          # Upload APK
          echo "Uploading to Telegram channel for branch: $BRANCH_NAME"
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
            -F "chat_id=${CHAT_ID}" \
            -F "document=@${APK_FILE}" \
            -F "thumbnail=@${THUMB_PATH}" \
            -F "caption=${CAPTION}" \
            -F "parse_mode=Markdown")

          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ APK uploaded successfully to $BRANCH_NAME channel"
          else
            echo "‚ùå Failed to upload APK to Telegram"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Create GitHub Release
        if: steps.check-secrets.outputs.skip_build != 'true' && github.event.inputs.skip_upload != 'yes' && !contains(github.event.head_commit.message, '[skip upload]')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version info from gradle.properties
          VERSION_NAME=$(grep "APP_VERSION_NAME=" gradle.properties | cut -d'=' -f2)
          VERSION_CODE=$(grep "APP_VERSION_CODE=" gradle.properties | cut -d'=' -f2)

          # Determine branch and tag prefix
          BRANCH_NAME="${{ github.ref_name }}"
          case "$BRANCH_NAME" in
            "main")
              TAG_PREFIX=""
              BRANCH_LABEL=""
              IS_PRERELEASE="false"
              ;;
            "canary")
              TAG_PREFIX="canary-"
              BRANCH_LABEL=" (Canary)"
              IS_PRERELEASE="true"
              ;;
            "dev")
              TAG_PREFIX="dev-"
              BRANCH_LABEL=" (Dev)"
              IS_PRERELEASE="true"
              ;;
          esac

          # Generate proper version tag
          VERSION_TAG="${TAG_PREFIX}v${VERSION_NAME}"
          RELEASE_NAME="NagramX ${VERSION_NAME}${BRANCH_LABEL}"

          # Get commit message
          if [ "${{ github.event_name }}" = "push" ]; then
            RELEASE_BODY="${{ github.event.head_commit.message }}"
          else
            RELEASE_BODY="${{ github.event.inputs.message }}"
          fi

          # Build release body with proper formatting
          FULL_BODY=$(printf "%s\n\n**Version**: %s (%s)\n**Branch**: %s\n**Commit**: [%s](%s/%s/commit/%s)\n**Build Date**: %s" \
            "$RELEASE_BODY" \
            "$VERSION_NAME" \
            "$VERSION_CODE" \
            "$BRANCH_NAME" \
            "${GITHUB_SHA:0:7}" \
            "${{ github.server_url }}" \
            "${{ github.repository }}" \
            "${{ github.sha }}" \
            "$(date -u +'%Y-%m-%d %H:%M UTC')")

          # Check if release already exists
          echo "Checking if release ${VERSION_TAG} already exists..."
          EXISTING_RELEASE=$(curl -s \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION_TAG}"
          )

          # Check if we got a valid release response
          EXISTING_RELEASE_ID=$(echo "$EXISTING_RELEASE" | grep -Po '"id":\s*\K[0-9]+' | head -1)

          if [ -n "$EXISTING_RELEASE_ID" ]; then
            echo "‚ö†Ô∏è  Release ${VERSION_TAG} already exists (ID: $EXISTING_RELEASE_ID)"
            echo "Updating existing release..."

            # Update the existing release
            JSON_PAYLOAD=$(jq -n \
              --arg name "$RELEASE_NAME" \
              --arg body "$FULL_BODY" \
              --argjson prerelease "$IS_PRERELEASE" \
              '{
                name: $name,
                body: $body,
                prerelease: $prerelease
              }')

            RELEASE_RESPONSE=$(curl -s -X PATCH \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${EXISTING_RELEASE_ID}" \
              -d "$JSON_PAYLOAD"
            )

            RELEASE_ID="$EXISTING_RELEASE_ID"
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep -Po '"upload_url":\s*"\K[^"]+' | sed 's/{.*//')

            if [ -z "$UPLOAD_URL" ]; then
              # If update failed, try to get upload URL from existing release
              UPLOAD_URL=$(echo "$EXISTING_RELEASE" | grep -Po '"upload_url":\s*"\K[^"]+' | sed 's/{.*//')
            fi

            echo "‚úÖ Release updated"
          else
            # Create new release
            echo "Creating GitHub release ${VERSION_TAG}..."
            JSON_PAYLOAD=$(jq -n \
              --arg tag "$VERSION_TAG" \
              --arg name "$RELEASE_NAME" \
              --arg body "$FULL_BODY" \
              --arg target "${{ github.sha }}" \
              --argjson prerelease "$IS_PRERELEASE" \
              '{
                tag_name: $tag,
                name: $name,
                body: $body,
                draft: false,
                prerelease: $prerelease,
                target_commitish: $target
              }')

            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "$JSON_PAYLOAD"
            )

            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | grep -Po '"id":\s*\K[0-9]+' | head -1)
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep -Po '"upload_url":\s*"\K[^"]+' | sed 's/{.*//')

            if [ -z "$RELEASE_ID" ] || [ -z "$UPLOAD_URL" ]; then
              echo "‚ùå Failed to create release"
              echo "Response: $RELEASE_RESPONSE"
              exit 1
            fi

            echo "‚úÖ Release created with ID: $RELEASE_ID"
          fi

          # Upload APK with branch-specific filename
          APK_FILE="${{ env.APK_PATH }}"
          ORIGINAL_FILENAME=$(basename "$APK_FILE")

          # Add branch prefix to filename if not main
          if [ "$BRANCH_NAME" != "main" ]; then
            APK_FILENAME="${BRANCH_NAME}-${ORIGINAL_FILENAME}"
          else
            APK_FILENAME="$ORIGINAL_FILENAME"
          fi

          echo "Uploading APK to GitHub release..."
          UPLOAD_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary "@${APK_FILE}" \
            "${UPLOAD_URL}?name=${APK_FILENAME}")

          if echo "$UPLOAD_RESPONSE" | grep -q '"state":\s*"uploaded"'; then
            echo "‚úÖ APK uploaded to GitHub release"
            echo "Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${VERSION_TAG}"
          else
            echo "‚ùå Failed to upload APK"
            echo "Response: $UPLOAD_RESPONSE"
            exit 1
          fi

      - name: Build Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if build was skipped due to missing channel
          if [ "${{ steps.check-secrets.outputs.skip_build }}" = "true" ]; then
            echo "### ‚è≠Ô∏è Build Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No Telegram channel configured for the **${{ github.ref_name }}** branch." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To enable builds for this branch, configure the appropriate secret:" >> $GITHUB_STEP_SUMMARY
            case "${{ github.ref_name }}" in
              "canary")
                echo "- **CHANNEL_CANARY**: Telegram channel ID for canary branch" >> $GITHUB_STEP_SUMMARY
                ;;
              "dev")
                echo "- **CHANNEL_DEV**: Telegram channel ID for dev branch" >> $GITHUB_STEP_SUMMARY
                ;;
            esac
            exit 0
          fi

          # Check if workflow failed
          if [ "${{ job.status }}" != "success" ]; then
            echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          # Only show build type if it was set
          if [ -n "${{ env.BUILD_VARIANT }}" ]; then
            echo "- **Build Type**: ${{ env.BUILD_VARIANT }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Type**: Not configured (workflow failed early)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          # Check if APK was actually built
          if [ -f "${{ env.APK_PATH }}" ]; then
            APK_SIZE_MB=$(echo "scale=1; $(stat -c%s "${{ env.APK_PATH }}") / 1048576" | bc)
            echo "- **APK Size**: ${APK_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **APK**: Not built" >> $GITHUB_STEP_SUMMARY
          fi

          # Check upload status based on actual completion
          if [ "${{ github.event.inputs.skip_upload }}" = "yes" ] || [[ "${{ github.event.head_commit.message }}" == *"[skip upload]"* ]]; then
            echo "- **Upload**: ‚è≠Ô∏è Skipped (by request)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ job.status }}" != "success" ]; then
            echo "- **Upload**: ‚ùå Not attempted (workflow failed)" >> $GITHUB_STEP_SUMMARY
          elif [ -f "${{ env.APK_PATH }}" ]; then
            echo "- **Upload**: ‚úÖ Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Upload**: ‚ùå Failed (no APK found)" >> $GITHUB_STEP_SUMMARY
          fi

          # Add failure reason if secrets check failed
          if [ "${{ steps.check-secrets.outcome }}" = "failure" ] 2>/dev/null; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîí Missing Required Secrets" >> $GITHUB_STEP_SUMMARY
            echo "Please configure the required secrets in your repository settings." >> $GITHUB_STEP_SUMMARY
          fi